from __future__ import print_function
from openturns import *

# Create the model Y = x1 + 2*x2
model = NumericalMathFunction(["x1", "x2"], ["y"], ["x1+2*x2"])

# Create the input distribution and random vector X
inputDist = ComposedDistribution([Normal(), Normal()], IndependentCopula(2))
inputDist.setDescription(['X1', 'X2'])

inputVector = RandomVector(inputDist)

# Create the output random vector Y=model(X)
ouputVector = RandomVector(model, inputVector)

# Create the event Y > 4
threshold = 4
myEvent = Event(ouputVector, Greater(), threshold)

# Create a Monte Carlo algorithm
myAlgo = MonteCarlo(myEvent)
myAlgo.setBlockSize(1)
myAlgo.setMaximumCoefficientOfVariation(0.1)
myAlgo.setMaximumOuterSampling(10000)
myAlgo.setMaximumStandardDeviation(0.001)

# Define the HistoryStrategy to store the values of $P_n$ and $\sigma_n$
# used ot draw the convergence graph
# Compact strategy : N points
N = 1000
myAlgo.setConvergenceStrategy(Compact(N))

# Save the number of calls to the model, its gradient and hessian done so far
# NOT usefull in the Monte Carlo case
modelCallNumberBefore = model.getEvaluationCallsNumber()
modelGradientCallNumberBefore = model.getGradientCallsNumber()
modelHessianCallNumberBefore = model.getHessianCallsNumber()

# To have access to the input and output samples
# after the simulation, activate the History mechanism
model.enableHistory()

# Remove all the values stored in the history mechanism
# Care : it is done regardless the status of the History mechanism
model.clearHistory()

# Launch the simulation
myAlgo.run()

# BEGIN_TEX
# Save the number of calls to the model, its gradient and hessian done so far
modelCallNumberAfter = model.getEvaluationCallsNumber()
modelGradientCallNumberAfter = model.getGradientCallsNumber()
modelHessianCallNumberAfter = model.getHessianCallsNumber()

# Display the number of iterations executed and
# the number of evaluations of the model
print("number of evaluations of the model = ",
      modelCallNumberAfter - modelCallNumberBefore)

# Stream out the complete simulation result structure
result = myAlgo.getResult()

# Get the mean point in event  domain
# care : only for Monte Carlo and LHS sampling methods
meanPointEvent = result.getMeanPointInEventDomain()

# Get the associated importance factors
# care : only for Monte Carlo and LHS sampling methods
impFactorsSimulation = result.getImportanceFactors()

# Display the number of iterations executed and the number of
# evaluations of the model
# ONLY in the Monte Carlo case
print("number of evaluations of the model = ",
      result.getOuterSampling() * result.getBlockSize())

# Get the values of the stop criteria
# Criteria 1 : Display the Coefficient of Variation of the estimator
print("Coefficient of Variation of Pn = ", result.getCoefficientOfVariation())

#  Criteria 2 : Display the Outer Sampling of the simumlation
print("Outer Sampling of the simulation =  ", result.getOuterSampling())

#  Criteria 3 : Display the Standard Deviation of the estimator
print("Standard Deviation of the estimator =  ", result.getStandardDeviation())

# Display the simulation event probability
probability = result.getProbabilityEstimate()
print("simulation probability estimation = ", probability)

# Display the variance of the simulation probability estimator
print("Variance of the simulation probability estimator = ",
      result.getVarianceEstimate())

# Display the confidence interval length centered around the
# MonteCarlo probability MCProb
# IC = [Probability - 0.5*length, Probability + 0.5*length]
# level 0.95
length95 = result.getConfidenceLength(0.95)
print("0.95 Confidence Interval length = ", length95)
print("IC at 0.95 = [", probability - 0.5 * length95,
      "; ", probability + 0.5 * length95, "]")

# Draw the convergence graph and the confidence interval of level alpha
# By default, alpha = 0.95
alpha = 0.90
convergenceGraph = myAlgo.drawProbabilityConvergence(alpha)

# In order to see the graph without creating the associated files
# View(convergenceGraph).show()

# Create the files i all formats
convergenceGraph.draw("convergenceGraphe")

# View the PNG file within the TUI
# View(convergenceGraph).show()

# Get the numerical samples of the input and output random vectors
# stored according to the History Strategy specified
# and used to evaluate the probability estimator and its variance
inputSampleStored = model.getHistoryInput().getSample()
outputSampleStored = model.getHistoryOutput().getSample()

# Get the values of the estimator and its variance
# stored according to the History Strategy specified
# and used to draw the convergence graph
estimator_probability_sample = myAlgo.getConvergenceStrategy().getSample()[0]
estimator_variance_sample = myAlgo.getConvergenceStrategy().getSample()[1]
# END_TEX
