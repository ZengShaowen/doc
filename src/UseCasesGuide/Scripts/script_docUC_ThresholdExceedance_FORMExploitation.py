from __future__ import print_function
from openturns import *

# Create the model Y = x1 + 2*x2
model = NumericalMathFunction(["x1", "x2"], ["y"], ["x1+2*x2"])

# Create the input distribution and random vector X
inputDist = ComposedDistribution([Normal(), Normal()], IndependentCopula(2))
inputDist.setDescription(['X1', 'X2'])

inputVector = RandomVector(inputDist)

# Create the output random vector Y=model(X)
output = RandomVector(model, inputVector)

# To have a beautifull graph of importance factors,
# give the output random variable a name
output.setName("MyOutputY")

# Create the event Y > 4
threshold = 4
myEvent = Event(output, Greater(), threshold)

# Create a NearestPoint algorithm with the Cobyla algorithm
myCobyla = Cobyla()

# Create a FORM and a SORM algorithm
myStartingPoint = inputDist.getMean()
myAlgoFORM = FORM(myCobyla, myEvent, myStartingPoint)
myAlgoSORM = SORM(myCobyla, myEvent, myStartingPoint)

# BEGIN_TEX
# Save the number of calls to the limit state function, its gradient and
# hessian already done
modelCallNumberBefore = model.getEvaluationCallsNumber()
modelGradientCallNumberBefore = model.getGradientCallsNumber()
modelHessianCallNumberBefore = model.getHessianCallsNumber()

# To have access to the input and output samples
# after the simulation, activate the History mechanism
model.enableHistory()

# Remove all the values stored in the history mechanism
# Care : it is done regardless the status of the History mechanism
model.clearHistory()

# Perform the simulation
myAlgoFORM.run()

# Save the number of calls to the limit state function, its gradient and
# hessian already done
modelCallNumberAfter = model.getEvaluationCallsNumber()
modelGradientCallNumberAfter = model.getGradientCallsNumber()
modelHessianCallNumberAfter = model.getHessianCallsNumber()

# Display the number of iterations executed and
# the number of evaluations of the limite state function
print("number of evaluations of the model = ", end=' ')
modelCallNumberAfter - modelCallNumberBefore

# Stream out the result
resultFORM = myAlgoFORM.getResult()

# Check the convergence criteria of the algorithm
optimResult = resultFORM.getOptimizationResult()
# In particular, draw the error histories
graphErrors = optimResult.drawErrorHistory()
graphErrors.setLegendPosition('bottom')
# Show(graphErrors)

# Hasofer reliability index
print("Hasofer reliability index=", resultFORM.getHasoferReliabilityIndex())

# Generalized reliability index
# FORM study : generalized reliability index is the Hasofer one
print("generalized reliability index=",
      resultFORM.getGeneralisedReliabilityIndex())

# Design point in the standard and physical spaces
print("standard space design point=", resultFORM.getStandardSpaceDesignPoint())
print("physical space design point=", resultFORM.getPhysicalSpaceDesignPoint())

# Is the standard point origin in failure space?
print("is standard point origin in failure space? ",
      resultFORM.getIsStandardPointOriginInFailureSpace())

# FORM probability of the event
print("event probability=", resultFORM.getEventProbability())

# Get the mean point in standard event space
print("Mean point in standard event space= ",
      resultFORM.getMeanPointInStandardEventDomain())

# Importance factors : numerical results
# Y-space definition
print("importance factors Y-space =", resultFORM.getImportanceFactors())
# U-space definition
print("importance factors U-space =", resultFORM.getImportanceFactors(True))

# "
# GRAPH 1 : Importance Factors graph
# "

# Y-space definition
importanceFactorsGraph = resultFORM.drawImportanceFactors()
# U-space definition
importanceFactorsGraph = resultFORM.drawImportanceFactors(True)

importanceFactorsGraph.draw("ImportanceFactorsDrawingFORM")

# In order to see the graph without creating the associated files
# View(importanceFactorsGraph).show()

# Hasofer Reliability Index Sensitivity : numerical results
hasoferReliabilityIndexSensitivity = resultFORM.getHasoferReliabilityIndexSensitivity(
)
print("hasoferReliabilityIndexSensitivity = ",
      hasoferReliabilityIndexSensitivity)

# "
# GRAPH 2 : Hasofer Reliability Index Sensitivity Graphs
# "

reliabilityIndexSensitivityGraphs = resultFORM.drawHasoferReliabilityIndexSensitivity(
)

# Sensitivity to parameters of the marginals of
# the input random vector
graph2a = reliabilityIndexSensitivityGraphs[0]
graph2a.draw("HasoferReliabilityIndexMarginalSensitivityDrawing")

# In order to see the graph without creating the associated files
# View(graph2a).show()

# Sensitivity to the other parameters (dependance)
graph2b = reliabilityIndexSensitivityGraphs[1]
graph2b.draw("HasoferReliabilityIndexOtherSensitivityDrawing")

# or in order to quickly draw it : with default options
# default options : 640, 480 and the files are on the current repertory
importanceFactorsGraph.draw("ImportanceFactorsDrawingFORM")

# In order to see the graph without creating the associated files
# View(graph2b).show()

# FORM Event Probability Sensitivity : numerical results
eventProbabilitySensitivity = resultFORM.getEventProbabilitySensitivity()
print("eventProbabilitySensitivity = ", eventProbabilitySensitivity)

################################
# GRAPH 3 : FORM Event Probability Sensitivity Graphs
################################

eventProbabilitySensitivityGraphs = resultFORM.drawEventProbabilitySensitivity(
)

# Sensitivity to parameters of the marginals of the input random vector
graph3a = eventProbabilitySensitivityGraphs[0]
graph3a.draw("EventProbabilityIndexMarginalSensitivityDrawing")

# In order to see the graph without creating the associated files
# View(graph3a).show()

# Sensitivity to the other parameters (dependance)
graph3b = eventProbabilitySensitivityGraphs[1]
graph3b.draw("EventProbabilityIndexOtherSensitivityDrawing")

# In order to see the graph without creating the associated files
# View(graph3b).show()

######################################
# SORM study
# Additionnal results w.r.t the FORM study
######################################

# Perform the simulation
myAlgoSORM.run()
resultSORM = myAlgoSORM.getResult()

# Reliability index
# with Breitung approximation
print("Breitung generalized reliability index=",
      resultSORM.getGeneralisedReliabilityIndexBreitung())

# with  HohenBichler approximation
print("HohenBichler generalized reliability index=",
      resultSORM.getGeneralisedReliabilityIndexHohenBichler())

# with Tvedt approximation
print("Tvedt generalized reliability index=",
      resultSORM.getGeneralisedReliabilityIndexTvedt())

# SORM probability of the event
# with Breitung approximation
print("Breitung event probability=", resultSORM.getEventProbabilityBreitung())

# with  HohenBichler approximation
print("HohenBichler event probability=",
      resultSORM.getEventProbabilityHohenBichler())

# with Tvedt approximation
print("Tvedt event probability=", resultSORM.getEventProbabilityTvedt())


# END_TEX
